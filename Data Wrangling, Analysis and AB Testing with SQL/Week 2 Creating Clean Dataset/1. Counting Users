--Exercise 1: We’ll be using the users table to answer the question 
--“How many new users are added each day?“. Start by making sure you understand the columns in the table.

SELECT 
  *
FROM dsv1069.users

--Solution

SELECT 
  id,
  parent_user_id,
  merged_at
FROM dsv1069.users
ORDER BY parent_user_id ASC

--Exercise 2: WIthout worrying about deleted user or merged users, count the number of users added each day. 

SELECT 
  created_at AS day,
  COUNT(*) AS users
FROM 
  dsv1069.users
GROUP BY 
  created_at


--Solution 1
SELECT 
  date(created_at) AS day,
  COUNT(*) AS counts
FROM dsv1069.users
GROUP BY created_at
ORDER BY created_at DESC

--Solution 2

SELECT 
  TO_CHAR(created_at, 'YYYY-MM-DD') AS day,
  COUNT(*) AS counts
FROM dsv1069.users
GROUP BY created_at
ORDER BY created_at DESC

--Solution 3

SELECT 
  date(TO_CHAR(created_at, 'YYYY-MM-DD')) AS day,
  COUNT(*) AS counts
FROM dsv1069.users
GROUP BY created_at
ORDER BY created_at DESC

--Exercise 3: Consider the following query. 
--Is this the right way to count merged or deleted users? If all of our users were deleted tomorrow what would the result look like?

SELECT  
  date(created_at) AS day,  
  COUNT(*) AS users 
FROM  
  dsv1069.users 
WHERE 
  deleted_at IS NULL 
AND    
  (id <> parent_user_id OR parent_user_id IS NULL)  
GROUP BY 
  date(created_at)  
  
--Exercise 4: Count the number of users deleted each day. 
--Then count the number of users removed due to merging in a similar way.

SELECT
 date(deleted_at) AS day,
 COUNT(*)
FROM 
  dsv1069.users
WHERE
  deleted_at IS NOT NULL 
GROUP BY
  date(deleted_at)
 

--Exercise 5: Use the pieces you’ve built as subtables and create a table that has a column for the date, 
--the number of users created, the number of users deleted and the number of users merged that day. 

SELECT 
  date(created_at) AS day,
  COUNT(*)         AS new_users_added
FROM 
  dsv1069.users
GROUP BY
  date(created_at)
  
--Solution
SELECT
  new.day,
  new.new_users_added,
  deleted.deleted_users,
  merged_users
FROM
    (SELECT 
      date(created_at) AS day,
      COUNT(*)         AS new_users_added
    FROM 
      dsv1069.users
    GROUP BY
      date(created_at)
    ) new
  LEFT JOIN 
    (SELECT
      date(deleted_at) AS day,
      COUNT(*)         AS deleted_users
    FROM 
      dsv1069.users
    WHERE
      deleted_at IS NOT NULL 
    GROUP BY
      date(deleted_at)
    ) deleted
  ON deleted.day = new.day
  LEFT JOIN
    (SELECT 
      date(merged_at) AS day,
      COUNT(*)        AS merged_users
    FROM 
      dsv1069.users
    WHERE
      id <> parent_user_id
    AND
      parent_user_id IS NOT NULL 
    GROUP BY 
      date(merged_at)
    ) merged
  ON merged.day = new.day
 
 --Exercise 6: Refine your query from #5 to have informative column names 
--and so that null columns return 0. 

SELECT
  new.day,
  new.new_added_users,
  COALESCE(deleted.deleted_users, 0) AS deleted_users,
  COALESCE(merged.merged_users, 0)  AS merged_users,
  (new.new_added_users - COALESCE(deleted.deleted_users, 0) - COALESCE(merged.merged_users, 0))
    AS net_added_users
FROM
    (SELECT 
      date(created_at) AS day,
      COUNT(*)         AS new_added_users
    FROM 
      dsv1069.users
    GROUP BY
      date(created_at)
    ) new
  LEFT JOIN 
    (SELECT
      date(deleted_at) AS day,
      COUNT(*)         AS deleted_users
    FROM 
      dsv1069.users
    WHERE
      deleted_at IS NOT NULL 
    GROUP BY
      date(deleted_at)
    ) deleted
  ON deleted.day = new.day
  LEFT JOIN
    (SELECT 
      date(merged_at) AS day,
      COUNT(*)        AS merged_users
    FROM 
      dsv1069.users
    WHERE
      id <> parent_user_id
    AND
      parent_user_id IS NOT NULL 
    GROUP BY 
      date(merged_at)
    ) merged
  ON merged.day = new.day
